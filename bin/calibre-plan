#!/usr/bin/env racket
#lang racket/base
(require racket/system
         racket/list
         racket/match
         racket/string)

(define CDB (find-executable-path "calibredb"))

(define (set-plan id val)
  (system* CDB "set_custom" "plan" id (if val "true" "false")))

(define (wiggle l)
  (if (empty? l)
    empty
    (cons (first l)
          (waggle (rest l)))))

(define (waggle l)
  (if (empty? l)
    empty
    (let ()
      (define rl (reverse l))
      (define rrl (reverse (rest rl)))
      (cons (first rl)
            (wiggle rrl)))))

(define (hash-cons! ht k v)
  (hash-update! ht k (λ (old) (cons v old)) empty))

(struct book-info (id active authors pubdate) #:transparent)

(module+ main
  (define-values (list:sp list:out list:in list:err)
    (subprocess #f #f #f CDB "list"
                "--fields=*read,*plan,*active,authors,pubdate"
                "--line-width=5000"
                "--separator=\t"))

  (define authors->recent-id (make-hash))
  (define changes (make-hash))

  (for ([p (in-lines list:out)])
    (match (map string-trim (string-split p "\t"))
      [(or (list "id" "*read" "*plan" "*active" "authors" "pubdate") (list))
       (void)]
      [(list id read plan active authors pubdate)
       (unless (string=? read "True")
         (hash-update!
          authors->recent-id
          authors
          (λ (old)
            (if (or (not old)
                    (string-ci<=? pubdate (book-info-pubdate old)))
              (book-info id active authors pubdate)
              old))
          #f))
       (when (string=? plan "True")
         (hash-cons! changes id 'to-false))
       (when (string=? active "True")
         (hash-cons! changes id 'must-true))]))

  (for ([vec (in-list
              (wiggle
               (sort (hash-values authors->recent-id)
                     string-ci<=?
                     #:key book-info-pubdate)))]
        [k (in-range 5)])
    (match-define (book-info id active authors pubdate) vec)
    (printf "! ~v\n" vec)
    (hash-cons! changes id 'to-true))

  (for ([(id change) (in-hash changes)])
    (match change
      [(or '(to-true to-false)
           '(to-true must-true to-false))
       (void)]
      ['(to-true)
       (set-plan id #t)]
      ['(to-false)
       (set-plan id #f)])))
