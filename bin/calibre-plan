#!/usr/bin/env racket
#lang racket/base
(require racket/system
         racket/match
         racket/string)

(define CDB (find-executable-path "calibredb"))

(define (set-plan id val)
  (system* CDB "set_custom" "plan" id (if val "true" "false")))

(module+ main
  (define-values (list:sp list:out list:in list:err)
    (subprocess #f #f #f CDB "list"
                "--fields=*read,*plan,authors,pubdate"
                "--line-width=5000"
                "--separator=\t"))

  (define authors->recent-id (make-hash))
  (define changes (make-hash))

  (for ([p (in-lines list:out)])
    (match (map string-trim (string-split p "\t"))
      [(or (list "id" "*read" "*plan" "authors" "pubdate") (list))
       (void)]
      [(list id read plan authors pubdate)
       (unless (string=? read "True")
         (hash-update!
          authors->recent-id
          authors
          (λ (old)
            (if (or (not old)
                    (string-ci<=? pubdate (vector-ref old 1)))
              (vector id pubdate authors)
              old))
          #f))
       (when (string=? plan "True")
         (hash-set! changes id '(to-false)))]))

  (for ([vec (in-list (sort (hash-values authors->recent-id)
                            string-ci<=?
                            #:key (λ (v) (vector-ref v 1))))]
        [k (in-range 5)])
    (match-define (vector id pubdate authors) vec)
    (printf "! ~v\n" (vector id authors pubdate))
    (hash-update! changes id (λ (old) (cons 'to-true old)) '()))

  (for ([(id change) (in-hash changes)])
    (match change
      ['(to-true to-false)
       (void)]
      ['(to-true)
       (set-plan id #t)]
      ['(to-false)
       (set-plan id #f)])))
