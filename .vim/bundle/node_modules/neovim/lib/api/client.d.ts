/// <reference types="node" />
/**
 * Handles attaching transport
 */
import { ILogger } from '../utils/logger';
import { Transport } from '../utils/transport';
import { VimValue } from '../types/VimValue';
import { Neovim } from './Neovim';
export declare class NeovimClient extends Neovim {
    protected requestQueue: Array<any>;
    private transportAttached;
    private _channel_id;
    constructor(options?: {
        transport?: Transport;
        logger?: ILogger;
    });
    /** Attaches msgpack to read/write streams **/
    attach({reader, writer}: {
        reader: NodeJS.ReadableStream;
        writer: NodeJS.WritableStream;
    }): void;
    readonly isApiReady: boolean;
    readonly channelId: Promise<number>;
    handleRequest(method: string, args: VimValue[], resp: any, ...restArgs: any[]): void;
    handleNotification(method: string, args: VimValue[], ...restArgs: any[]): void;
    setupTransport(): void;
    requestApi(): Promise<any[]>;
    generateApi(): Promise<null | boolean>;
}
