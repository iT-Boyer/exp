"use strict";
// Plugin decorator
Object.defineProperty(exports, "__esModule", { value: true });
const properties_1 = require("./properties");
function wrapper(cls, options) {
    class WrapperClass extends cls {
        constructor(nvim) {
            super(nvim);
            this.setApi(nvim);
        }
        setApi(nvim) {
            this.nvim = nvim;
        }
    }
    Object.defineProperty(WrapperClass, properties_1.NVIM_PLUGIN, { value: true });
    if (options && options.dev) {
        Object.defineProperty(WrapperClass, properties_1.NVIM_DEV_MODE, { value: true });
    }
    return WrapperClass;
}
// Can decorate a class with options object
function plugin(outter) {
    /**
      * Decorator should support
      *
      * @Plugin(opts)
      * class TestPlug {}
      *
      * and
      *
      * @PluginA
      * class TestPlug {}
      *
      *and
      *
      * Plugin(opts)(TestPlugin)
      *
      * or
      *
      * Plugin(TestPlugin)
      */
    return typeof outter !== 'function'
        ? (cls) => wrapper(cls, outter)
        : wrapper(outter);
}
exports.plugin = plugin;
