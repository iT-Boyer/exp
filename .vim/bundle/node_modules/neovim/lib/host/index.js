"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const attach_1 = require("../attach");
const logger_1 = require("../utils/logger");
const factory_1 = require("./factory");
class Host {
    constructor() {
        // Map for loaded plugins
        this.loaded = {};
        this.handler = this.handler.bind(this);
        this.handlePlugin = this.handlePlugin.bind(this);
    }
    getPlugin(filename, options = null) {
        const plugin = this.loaded[filename] || factory_1.loadPlugin(filename, this.nvim, options);
        logger_1.logger.debug('getPlugin.shouldCache', plugin && plugin.shouldCache);
        if (plugin && plugin.shouldCache) {
            this.loaded[filename] = plugin;
        }
        return plugin;
    }
    // Route incoming request to a plugin
    handlePlugin(method, args) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            logger_1.logger.debug('host.handlePlugin: ', method);
            // Parse method name
            const procInfo = method.split(':');
            const filename = procInfo[0];
            const type = procInfo[1];
            const procName = `"${procInfo.slice(2).join(' ')}"`;
            const plugin = this.getPlugin(filename);
            if (!plugin) {
                const msg = `Could not load plugin: ${filename}`;
                reject(new Error(msg));
                logger_1.logger.error(msg);
            }
            else if (plugin.module) {
                const handler = plugin.handlers[method];
                if (typeof plugin.module[handler] !== 'function') {
                    const errMsg = `Missing handler for ${type}: "${procName}" in ${filename}`;
                    logger_1.logger.error(errMsg);
                    reject(new Error(errMsg));
                }
                else {
                    try {
                        resolve(yield plugin.module[handler](...args));
                    }
                    catch (err) {
                        const msg = `Error in plugin for ${type}:${procName}: ${err.message}`;
                        logger_1.logger.error(`${msg} (file: ${filename}, stack: ${err.stack})`);
                        reject(err);
                    }
                }
            }
        }));
    }
    handleRequestSpecs(method, args, res) {
        const filename = args[0];
        logger_1.logger.debug(`requested specs for ${filename}`);
        // Can return null if there is nothing defined in plugin
        const plugin = this.getPlugin(filename, { noCreateInstance: true });
        const specs = (plugin && plugin.specs) || [];
        res.send(specs);
        logger_1.logger.debug(`specs: ${util.inspect(specs)}`);
    }
    handler(method, args, res) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.logger.debug('request received: ', method);
            // 'poll' and 'specs' are requests by neovim,
            // otherwise it will
            if (method === 'poll') {
                // Handshake for neovim
                res.send('ok');
            }
            else if (method === 'specs') {
                // Return plugin specs
                this.handleRequestSpecs(method, args, res);
            }
            else {
                try {
                    // TODO check if sync
                    const plugResult = yield this.handlePlugin(method, args);
                    res.send(!plugResult || typeof plugResult === 'undefined' ? null : plugResult);
                }
                catch (err) {
                    res.send(err.toString(), true);
                }
            }
        });
    }
    start({ proc }) {
        return __awaiter(this, void 0, void 0, function* () {
            // stdio is reversed since it's from the perspective of Neovim
            logger_1.logger.debug('host.start');
            const nvim = attach_1.attach({ reader: proc.stdin, writer: proc.stdout });
            this.nvim = nvim;
            if (nvim) {
                nvim.on('request', this.handler);
                nvim.on('notification', this.handlePlugin);
                nvim.on('disconnect', () => {
                    logger_1.logger.debug('host.disconnected');
                });
            }
        });
    }
}
exports.Host = Host;
