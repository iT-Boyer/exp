/// <reference types="node" />
import { Neovim } from '../api/Neovim';
import { Spec } from '../types/Spec';
export interface IModule {
    new (name: string): any;
    _resolveFilename: (file: string, context: any) => string;
    _extensions: {};
    _cache: {
        [file: string]: any;
    };
    _compile: () => void;
    wrap: (content: string) => string;
    require: (file: string) => NodeModule;
    _nodeModulePaths: (filename: string) => string[];
}
export interface IPluginObject {
    shouldCache: boolean;
    sandbox: ISandbox;
    specs: any[];
    handlers: {};
    import: any;
    module: any;
}
export declare type LoadPluginOptions = {
    cache?: boolean;
    noCreateInstance?: boolean;
};
export interface ISandbox {
    process: NodeJS.Process;
    module: NodeModule;
    require: (p: string) => any;
    console: {
        [key in keyof Console]?: Function;
    };
}
export declare function loadPlugin(filename: string, nvim: Neovim, options?: LoadPluginOptions): {
    shouldCache: boolean;
    sandbox: ISandbox;
    specs: Spec[];
    handlers: {
        [handerId: string]: string;
    };
    import: any;
    module: any;
};
